@page "/FraudUI"
@rendermode InteractiveServer

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

    <MudContainer MaxWidth="MaxWidth.Small">
        <MudStack>
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudAvatar Image="assets/DocTranslate.png" Size="Size.Large" />
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Fraud Checker</MudText>
                        <MudText Typo="Typo.body2">Upload Files for Analysis</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <MudPaper Class="pa-4" >
                <MudStack Spacing="4">
                    <MudText Typo="Typo.body1">Select EPPIC, GIACT, SIEBEL, Hospitals</MudText>
                    <FilePicker @ref="childFilePicker" OnFilesUploaded=HandleFileUploaded />
                </MudStack>
            </MudPaper>
        <MudProgressLinear Color="Color.Primary" @ref="progressBar" Hidden="@(progressHidden)" Indeterminate="true" Class="my-7" />
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                <MudButton Variant="Variant.Filled" OnClick = "@OnClick_StartProcessing" Color="Color.Primary" Disabled="@(!_readytoprocess)" DisableElevation="true">Start Processing</MudButton>
            </MudStack>
        </MudPaper>  
    </MudStack>
    </MudContainer>
<MudSpacer />
<FraudAnalysisResponse />

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private const bool V = false;
    private bool progressHidden = true;
    private bool _readytoprocess = false;
    private FilePicker? childFilePicker;
    private MudProgressLinear? progressBar;
    private bool _stateChangefilepicker = false;

    // protected override void OnInitialized()
    // {
    //     state.OnChange += StateHasChanged;
    // }

    private void  HandleFileUploaded()
    {
        // Child FilePicker triggers this event
        _readytoprocess = true;  // this will endable the start processing button
       
        // await DoSomethingElse();

        // StateHasChanged() not needed when handling an event
        // The Blazor engine will automatically
        // run an Html diff after handling a component
        // event.

        // StateHasChanged();
    }

    private async Task OnClick_StartProcessing()
    {
        progressHidden = false;
        _readytoprocess = false;
        int milliseconds = 10000;       // 10 seconds
        await Task.Delay(milliseconds); // Simulate checking the status of the job
        progressHidden = true;
    }


    private bool FilesUploaded()
    {
        if (_stateChangefilepicker != childFilePicker.FilesUploaded)  // state has changed
        {
            _stateChangefilepicker = childFilePicker.FilesUploaded;
            StateHasChanged();
        }

        return _stateChangefilepicker;
    }

    public void OnClick()
    {
        StateHasChanged();
    }

}
